{"version":3,"sources":["webpack:///./src/pages/verification.js"],"names":["Verification","useEffect","init","token","containerId","onComplete","data","console","log","steps","type","options","title","descriptions","nextButton","documentTypes","passport","driving_licence","national_identity_card","residence_permit","showCountrySelection","forceCrossDevice","id"],"mappings":"2FAAA,4CAiOeA,UAxNM,WAuEjB,OArEAC,qBAAU,WACNC,eAAK,CAEDC,MAAO,GAEPC,YAAa,eAIbC,WAAY,SAAUC,GAClBC,QAAQC,IAAI,2BA8BhBC,MAAO,CACH,CACIC,KAAM,UACNC,QAAS,CACLC,MAAO,+BACPC,aAAc,CAAC,2dAEfC,WAAY,yCAGpB,CACIJ,KAAM,WACNC,QAAS,CACLI,cAAe,CACXC,UAAU,EACVC,iBAAiB,EACjBC,wBAAwB,EACxBC,kBAAkB,GAEtBC,sBAAsB,IAG9B,YAGJC,kBAAkB,MAEvB,IAGC,oCACI,yBAAKC,GAAG","file":"component---src-pages-verification-js-923363aff1f4809955c6.js","sourcesContent":["import React, { useEffect, useState } from \"react\"\n\n\nimport { init } from 'onfido-sdk-ui'\n\n\n\n\n\nconst Verification = () => {\n\n    useEffect(() => {\n        init({\n            // the JWT token that you generated earlier on\n            token: \"\",\n            // ID of the element you want to mount the component on\n            containerId: 'onfido-mount',\n            // ALTERNATIVE: if your integration requires it, you can pass in the container element instead\n            // (Note that if `containerEl` is provided, then `containerId` will be ignored)\n            // containerEl: <div id=\"root\" />,\n            onComplete: function (data) {\n                console.log('everything is complete')\n                // `data` will be an object that looks something like this:\n                //\n                // {\n                //   \"document_front\": {\n                //     \"id\": \"5c7b8461-0e31-4161-9b21-34b1d35dde61\",\n                //     \"type\": \"passport\",\n                //     \"side\": \"front\"\n                //   },\n                //   \"face\": {\n                //     \"id\": \"0af77131-fd71-4221-a7c1-781f22aacd01\",\n                //     \"variant\": \"standard\"\n                //   }\n                // }\n                //\n                // For two-sided documents like `driving_licence` and `national_identity_card`, the object will also\n                // contain a `document_back` property representing the reverse side:\n                //\n                // {\n                //   ...\n                //   \"document_back\": {\n                //     \"id\": \"6f63bfff-066e-4152-8024-3427c5fbf45d\",\n                //     \"type\": \"driving_licence\",\n                //     \"side\": \"back\"\n                // }\n                //\n                // You can now trigger your backend to start a new check\n                // `data.face.variant` will return the variant used for the face step\n                // this can be used to perform a facial similarity check on the applicant\n            },\n            steps: [\n                {\n                    type: 'welcome',\n                    options: {\n                        title: 'Zweryfikuj się w WealthSeed!',\n                        descriptions: [\"Jesli chodzi o kolejny etap (nie dziala mi parametr do konfiguracji title i descriptiona w nastepnym, nie wiem czemu): Mozna konfigurowac ktore kafelki maja sie wyswietlic, na przyklad tylko passpor i dowod osobisty. jEsLI sie ustawi, ze tylko jeden ma byc widoczny, to kolejnego ekranu nie bedzie i od razu przeskoczy do nastepnego kroku. I polskie znaki nie dzialaja, wywala sie wtedy apka, ale moze jest to konfigurowalne. Jest tez flaga boolowska czy ma pytac o kraj.\"],\n                        // descriptions: \"Przygotuj dokmenty \"\n                        nextButton: \"zweryfikuj sie aby byc super bogatym\"\n                    },\n                },\n                {\n                    type: \"document\",\n                    options: {\n                        documentTypes: {\n                            passport: true,\n                            driving_licence: true,\n                            national_identity_card: true,\n                            residence_permit: true\n                        },\n                        showCountrySelection: true\n                    }\n                },\n                \"complete\"\n\n            ],\n            forceCrossDevice: false\n        })\n    }, [])\n\n    return (\n        <>\n            <div id=\"onfido-mount\"></div>\n        </>\n    )\n}\n\n\n// const Verification = () => {\n//   const [photoDone, setPhotoDone ] = useState(false);\n\n\n//   const media = () => {\n//     var width = 1280 // We will scale the photo width to this\n//     var height = 0 // This will be computed based on the input stream\n\n//     var streaming = false\n\n//     let video = document.getElementById(\"video\")\n//     let canvas = document.getElementById(\"canvas\")\n//     let photo = document.getElementById(\"photo\")\n//     let startbutton = document.getElementById(\"startbutton\")\n//     let streamRef\n\n//     photo.removeAttribute(\"src\");\n\n//     navigator.mediaDevices\n//       .getUserMedia({ video: true, audio: false })\n//       .then(function (stream) {\n//         streamRef = stream\n//         video.srcObject = stream\n//         video.play()\n//       })\n//       .catch(function (err) {\n//         console.log(\"An error occurred: \" + err)\n//       })\n\n//     video.addEventListener(\n//       \"canplay\",\n//       function (ev) {\n//         if (!streaming) {\n//           height = video.videoHeight / (video.videoWidth / width)\n\n//           video.setAttribute(\"width\", width)\n//           video.setAttribute(\"height\", height)\n//           canvas.setAttribute(\"width\", width)\n//           canvas.setAttribute(\"height\", height)\n//           streaming = true\n//         }\n//       },\n//       false\n//     )\n\n//     function takepicture() {\n//       var context = canvas.getContext(\"2d\");\n//       var data;\n//       if (width && height) {\n//         canvas.width = width\n//         canvas.height = height\n\n//         context.translate(width, 0);\n//         context.scale(-1, 1);\n//         context.drawImage(video, 0, 0, width, height)\n\n\n//         data = canvas.toDataURL(\"image/png\")\n\n\n//         photo.setAttribute(\"src\", data);\n//         setPhotoDone(true);\n//         photo.classList.add('show')\n\n//         setTimeout(() => {\n//           streamRef.getTracks().forEach(track => track.stop())\n//         }, 300)\n//       } else {\n//         clearphoto()\n//       }\n//     }\n\n//     function clearphoto() {\n//       var context = canvas.getContext(\"2d\")\n//       context.fillStyle = \"#AAA\"\n\n\n//       context.fillRect(0, 0, canvas.width, canvas.height)\n\n\n\n//       var data = canvas.toDataURL(\"image/png\")\n//       photo.setAttribute(\"src\", data)\n//     }\n\n//     startbutton.addEventListener(\n//       \"click\",\n//       function (ev) {\n//         takepicture()\n//         ev.preventDefault()\n//       },\n//       false\n//     )\n//   }\n\n//   useEffect(() => {\n//     if(photoDone === false)\n//       media();\n//   }, [photoDone])\n\n\n//   return (\n//     <>\n//     <div className=\"verification orientationchange \" id=\"fade_it\">\n//       <div className=\"video_container\">\n\n//           <video id=\"video\" autoplay muted playsInline>\n//             Video stream not available.\n//           </video>\n//           <img className=\"frame\" src={frame} />\n//       </div>\n//       <canvas id=\"canvas\"></canvas>\n//       <div class=\"output\">\n//         <img id=\"photo\" />\n//       </div>\n//       {!photoDone && (\n//          <button id=\"startbutton\" className=\"button_make_photo\">\n//           <img src={photo} />\n//        </button>\n//       )}\n\n//       {photoDone && (\n//         <div className=\"button_done_container\">\n//           <button className=\"button is-primary \"> selfie wyraźle, przejdź do skanowania dowodu</button>\n//           <button className='button is-primary' id=\"clear_photo\" \n//             onClick={() => {\n//             setPhotoDone(false);\n\n//           }}> powtórz </button>\n//         </div>\n//       )}\n//     </div>\n\n//     </>\n//   )\n// }\n\nexport default Verification\n"],"sourceRoot":""}