type Query {
  managedInvestmentStrategies(currency: String): [ManagedInvestmentStrategies]
  managedPortfolios(counterparty: String): [ManagedPortfolio]
}

type Mutation {
  createManagedPortfolio(counterparty: String!, strategy: ManagedInvestmentStrategy!, portfolioName: String!, amount: BigDecimal!): ManagedPortfolio!
  addFundsToManagedPortfolio(portfolioId: Long, amount: BigDecimal): PortfolioOperation!
  withdrawFromPortfolio(portfolioId: Long, amount: BigDecimal, closePortfolio: Boolean!): PortfolioOperation!
  # TODO rebalancePortfolio
}

interface InvestmentStrategy {
  """This interface represents various investment strategies. It will be implemented by types used to represent both managed portfolio strategies and creator's strategies"""
  id: Long! @unique
  status: InvestmentStrategyStatus!
  name: String!
  currency: String
  minInvestment: BigDecimal
  managementFee: BigDecimal
  autoRebalance: BigDecimal
  rebalanceIntervalMonths: Int
  constituents: [InvestmentStrategyConstituent]
  performance: [StrategyPerformance]
}

type ManagedInvestmentStrategy implements InvestmentStrategy {
  """This is what we show in the available portfolio strategies"""
  id: Long! @unique
  status: InvestmentStrategyStatus!
  name: String!
  currency: String
  minInvestment: BigDecimal
  managementFee: BigDecimal
  autoRebalance: BigDecimal
  rebalanceIntervalMonths: Int
  constituents: [InvestmentStrategyConstituent]
  performance: [StrategyPerformance]
  benchmark: Benchmark
}

type ManagedPortfolio {
  """An instance of a managed portfolio in the given ManagedInvestmentStrategy"""
  id: Long! @unique
  strategy: ManagedInvestmentStrategy!
  name: String!
  isActive: Boolean!
  createdDateTime: DateTime!
  closedDateTime: DateTime
  """Probably no need for a dedicated type, I suggest reusing InstrumentResponse for this"""
  instruments: InstrumentsResponse!
  performance: [StrategyPerformance]
  operations: [PortfolioOperation]
}

enum InvestmentStrategyStatus {
  PENDING_APPROVAL,
  ACTIVE,
  EXPIRED
}

enum PortfolioOperationType {
  CREATION,
  CLOSING,
  FUND,
  WITHDRAWAL,
  REBALANCE
}

type PortfolioOperation {
  id: Long! @unique
  type: PortfolioOperationType
  status: PortfolioOperationStatus
  startTime: DateTime!
  completionTime: DateTime!
  amount: BigDecimal
  rebalanceOperation: [RebalanceOperation]
  relatedOrderIds: [Long] # or better InvestmentOrderResponse?
  """For exmaple: client, automatic, manager, back office, perhaps this should be an enum for better multianguage support"""
  source: String!
}

enum PortfolioOperationStatus {
  INITIATED,
  QUEUED,
  IN_PROGRESS,
  FAILED,
  COMPLETE,
  CANCELED
}

type RebalanceOperation {
  operationType: RebalanceOperationType
  instrument: Instrument #Check
  addAmount: Int
  addValue: BigDecimal
  removeAmount: Int
  removeValue: BigDecimal
}

interface PortfolioOrderExecutionStrategy {
  id: Long! @unique
  name: String!
}

type OneToOneExecutionStrategy implements PortfolioExecuionStrategy {

}

type BatchedExecutionStrategy implements PortfolioExecutionStrategy {
  batchId: String!
}

type OrderBatch {
  id: String! @unique
  batchSize: Int
  batchExpirationDateTime: DateTime
}

enum PerformancePeriod {
  1D,
  1W,
  1M,
  3M,
  6M,
  1Y,
  3Y,
  5Y,
  10Y
}

type StrategyPerformance {
  period: PerformancePeriod!
  performance: BigDecimal!
}

type Benchmark {
  name: String!
  """This could be the name of the underlying index for instance, say S&P500"""
  underlyingName: String
  performance: [StrategyPerformance!]
}

type RiskProfile {
  id: Long! @unique
  name: String! @unique
  minVar: BigDecimal
  maxVar: BigDecimal
}

type InvestmentStrategyConstituent {
  instrument: Instrument!
  """Percentage Weight, used for strategies"""
  weight: BigDecimal
}